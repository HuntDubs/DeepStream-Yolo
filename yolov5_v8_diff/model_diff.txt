0a1
> import contextlib
2,3c3
< 
< import torch
---
> import warnings
4a5
> import torch
8c9
<     """Pad to 'same' shape outputs."""
---
>     # Pad to 'same' shape outputs
17c18
<     """Standard convolution with args(ch_in, ch_out, kernel, stride, padding, groups, dilation, activation)."""
---
>     # Standard convolution with args(ch_in, ch_out, kernel, stride, padding, groups, dilation, activation)
21d21
<         """Initialize Conv layer with given arguments including activation."""
28d27
<         """Apply convolution, batch normalization and activation to input tensor."""
32d30
<         """Perform transposed convolution of 2D data."""
37,38c35
<     """Depth-wise convolution."""
< 
---
>     # Depth-wise convolution
44,45c41
<     """Depth-wise transpose convolution."""
< 
---
>     # Depth-wise transpose convolution
49,102c45,52
< 
< class ConvTranspose(nn.Module):
<     """Convolution transpose 2d layer."""
<     default_act = nn.SiLU()  # default activation
< 
<     def __init__(self, c1, c2, k=2, s=2, p=0, bn=True, act=True):
<         """Initialize ConvTranspose2d layer with batch normalization and activation function."""
<         super().__init__()
<         self.conv_transpose = nn.ConvTranspose2d(c1, c2, k, s, p, bias=not bn)
<         self.bn = nn.BatchNorm2d(c2) if bn else nn.Identity()
<         self.act = self.default_act if act is True else act if isinstance(act, nn.Module) else nn.Identity()
< 
<     def forward(self, x):
<         """Applies transposed convolutions, batch normalization and activation to input."""
<         return self.act(self.bn(self.conv_transpose(x)))
< 
<     def forward_fuse(self, x):
<         """Applies activation and convolution transpose operation to input."""
<         return self.act(self.conv_transpose(x))
< 
< 
< class DFL(nn.Module):
<     """
<     Integral module of Distribution Focal Loss (DFL).
<     Proposed in Generalized Focal Loss https://ieeexplore.ieee.org/document/9792391
<     """
< 
<     def __init__(self, c1=16):
<         """Initialize a convolutional layer with a given number of input channels."""
<         super().__init__()
<         self.conv = nn.Conv2d(c1, 1, 1, bias=False).requires_grad_(False)
<         x = torch.arange(c1, dtype=torch.float)
<         self.conv.weight.data[:] = nn.Parameter(x.view(1, c1, 1, 1))
<         self.c1 = c1
< 
<     def forward(self, x):
<         """Applies a transformer layer on input tensor 'x' and returns a tensor."""
<         b, c, a = x.shape  # batch, channels, anchors
<         return self.conv(x.view(b, 4, self.c1, a).transpose(2, 1).softmax(1)).view(b, 4, a)
<         # return self.conv(x.view(b, self.c1, 4, a).softmax(1)).view(b, 4, a)
< 
< 
< class TransformerLayer(nn.Module):
<     """Transformer layer https://arxiv.org/abs/2010.11929 (LayerNorm layers removed for better performance)."""
< 
<     def __init__(self, c, num_heads):
<         """Initializes a self-attention mechanism using linear transformations and multi-head attention."""
<         super().__init__()
<         self.q = nn.Linear(c, c, bias=False)
<         self.k = nn.Linear(c, c, bias=False)
<         self.v = nn.Linear(c, c, bias=False)
<         self.ma = nn.MultiheadAttention(embed_dim=c, num_heads=num_heads)
<         self.fc1 = nn.Linear(c, c, bias=False)
<         self.fc2 = nn.Linear(c, c, bias=False)
---
> class Proto(nn.Module):
>     # YOLOv5 mask Proto module for segmentation models
>     def __init__(self, c1, c_=256, c2=32):  # ch_in, number of protos, number of masks
>         super().__init__()
>         self.cv1 = Conv(c1, c_, k=3)
>         self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
>         self.cv2 = Conv(c_, c_, k=3)
>         self.cv3 = Conv(c_, c2)
105,131c55,56
<         """Apply a transformer block to the input x and return the output."""
<         x = self.ma(self.q(x), self.k(x), self.v(x))[0] + x
<         x = self.fc2(self.fc1(x)) + x
<         return x
< 
< 
< class TransformerBlock(nn.Module):
<     """Vision Transformer https://arxiv.org/abs/2010.11929."""
< 
<     def __init__(self, c1, c2, num_heads, num_layers):
<         """Initialize a Transformer module with position embedding and specified number of heads and layers."""
<         super().__init__()
<         self.conv = None
<         if c1 != c2:
<             self.conv = Conv(c1, c2)
<         self.linear = nn.Linear(c2, c2)  # learnable position embedding
<         self.tr = nn.Sequential(*(TransformerLayer(c2, num_heads) for _ in range(num_layers)))
<         self.c2 = c2
< 
<     def forward(self, x):
<         """Forward propagates the input through the bottleneck module."""
<         if self.conv is not None:
<             x = self.conv(x)
<         b, _, w, h = x.shape
<         p = x.flatten(2).permute(2, 0, 1)
<         return self.tr(p + self.linear(p)).permute(1, 2, 0).reshape(b, self.c2, w, h)
< 
---
>         return self.cv3(self.cv2(self.upsample(self.cv1(x))))
>     
134,136c59,60
<     """Standard bottleneck."""
< 
<     def __init__(self, c1, c2, shortcut=True, g=1, k=(3, 3), e=0.5):  # ch_in, ch_out, shortcut, groups, kernels, expand
---
>     # Standard bottleneck
>     def __init__(self, c1, c2, shortcut=True, g=1, e=0.5):  # ch_in, ch_out, shortcut, groups, expansion
139,140c63,64
<         self.cv1 = Conv(c1, c_, k[0], 1)
<         self.cv2 = Conv(c_, c2, k[1], 1, g=g)
---
>         self.cv1 = Conv(c1, c_, 1, 1)
>         self.cv2 = Conv(c_, c2, 3, 1, g=g)
144d67
<         """'forward()' applies the YOLOv5 FPN to input data."""
149,150c72
<     """CSP Bottleneck https://github.com/WongKinYiu/CrossStagePartialNetworks."""
< 
---
>     # CSP Bottleneck https://github.com/WongKinYiu/CrossStagePartialNetworks
163d84
<         """Applies a CSP bottleneck with 3 convolutions."""
169,172c90,93
< class C3(nn.Module):
<     """CSP Bottleneck with 3 convolutions."""
< 
<     def __init__(self, c1, c2, n=1, shortcut=True, g=1, e=0.5):  # ch_in, ch_out, number, shortcut, groups, expansion
---
> class CrossConv(nn.Module):
>     # Cross Convolution Downsample
>     def __init__(self, c1, c2, k=3, s=1, g=1, e=1.0, shortcut=False):
>         # ch_in, ch_out, kernel, stride, groups, expansion, shortcut
175,178c96,98
<         self.cv1 = Conv(c1, c_, 1, 1)
<         self.cv2 = Conv(c1, c_, 1, 1)
<         self.cv3 = Conv(2 * c_, c2, 1)  # optional act=FReLU(c2)
<         self.m = nn.Sequential(*(Bottleneck(c_, c_, shortcut, g, k=((1, 1), (3, 3)), e=1.0) for _ in range(n)))
---
>         self.cv1 = Conv(c1, c_, (1, k), (1, s))
>         self.cv2 = Conv(c_, c2, (k, 1), (s, 1), g=g)
>         self.add = shortcut and c1 == c2
181,183c101
<         """Forward pass through the CSP bottleneck with 2 convolutions."""
<         return self.cv3(torch.cat((self.m(self.cv1(x)), self.cv2(x)), 1))
< 
---
>         return x + self.cv2(self.cv1(x)) if self.add else self.cv2(self.cv1(x))
185,186d102
< class C2(nn.Module):
<     """CSP Bottleneck with 2 convolutions."""
187a104,105
> class C3(nn.Module):
>     # CSP Bottleneck with 3 convolutions
190,273c108,112
<         self.c = int(c2 * e)  # hidden channels
<         self.cv1 = Conv(c1, 2 * self.c, 1, 1)
<         self.cv2 = Conv(2 * self.c, c2, 1)  # optional act=FReLU(c2)
<         # self.attention = ChannelAttention(2 * self.c)  # or SpatialAttention()
<         self.m = nn.Sequential(*(Bottleneck(self.c, self.c, shortcut, g, k=((3, 3), (3, 3)), e=1.0) for _ in range(n)))
< 
<     def forward(self, x):
<         """Forward pass through the CSP bottleneck with 2 convolutions."""
<         a, b = self.cv1(x).chunk(2, 1)
<         return self.cv2(torch.cat((self.m(a), b), 1))
< 
< 
< class C2f(nn.Module):
<     """CSP Bottleneck with 2 convolutions."""
< 
<     def __init__(self, c1, c2, n=1, shortcut=False, g=1, e=0.5):  # ch_in, ch_out, number, shortcut, groups, expansion
<         super().__init__()
<         self.c = int(c2 * e)  # hidden channels
<         self.cv1 = Conv(c1, 2 * self.c, 1, 1)
<         self.cv2 = Conv((2 + n) * self.c, c2, 1)  # optional act=FReLU(c2)
<         self.m = nn.ModuleList(Bottleneck(self.c, self.c, shortcut, g, k=((3, 3), (3, 3)), e=1.0) for _ in range(n))
< 
<     def forward(self, x):
<         """Forward pass of a YOLOv5 CSPDarknet backbone layer."""
<         y = list(self.cv1(x).chunk(2, 1))
<         y.extend(m(y[-1]) for m in self.m)
<         return self.cv2(torch.cat(y, 1))
< 
<     def forward_split(self, x):
<         """Applies spatial attention to module's input."""
<         y = list(self.cv1(x).split((self.c, self.c), 1))
<         y.extend(m(y[-1]) for m in self.m)
<         return self.cv2(torch.cat(y, 1))
< 
< 
< class ChannelAttention(nn.Module):
<     """Channel-attention module https://github.com/open-mmlab/mmdetection/tree/v3.0.0rc1/configs/rtmdet."""
< 
<     def __init__(self, channels: int) -> None:
<         super().__init__()
<         self.pool = nn.AdaptiveAvgPool2d(1)
<         self.fc = nn.Conv2d(channels, channels, 1, 1, 0, bias=True)
<         self.act = nn.Sigmoid()
< 
<     def forward(self, x: torch.Tensor) -> torch.Tensor:
<         return x * self.act(self.fc(self.pool(x)))
< 
< 
< class SpatialAttention(nn.Module):
<     """Spatial-attention module."""
< 
<     def __init__(self, kernel_size=7):
<         """Initialize Spatial-attention module with kernel size argument."""
<         super().__init__()
<         assert kernel_size in (3, 7), 'kernel size must be 3 or 7'
<         padding = 3 if kernel_size == 7 else 1
<         self.cv1 = nn.Conv2d(2, 1, kernel_size, padding=padding, bias=False)
<         self.act = nn.Sigmoid()
< 
<     def forward(self, x):
<         """Apply channel and spatial attention on input for feature recalibration."""
<         return x * self.act(self.cv1(torch.cat([torch.mean(x, 1, keepdim=True), torch.max(x, 1, keepdim=True)[0]], 1)))
< 
< 
< class CBAM(nn.Module):
<     """Convolutional Block Attention Module."""
< 
<     def __init__(self, c1, kernel_size=7):  # ch_in, kernels
<         super().__init__()
<         self.channel_attention = ChannelAttention(c1)
<         self.spatial_attention = SpatialAttention(kernel_size)
< 
<     def forward(self, x):
<         """Applies the forward pass through C1 module."""
<         return self.spatial_attention(self.channel_attention(x))
< 
< 
< class C1(nn.Module):
<     """CSP Bottleneck with 1 convolution."""
< 
<     def __init__(self, c1, c2, n=1):  # ch_in, ch_out, number
<         super().__init__()
<         self.cv1 = Conv(c1, c2, 1, 1)
<         self.m = nn.Sequential(*(Conv(c2, c2, 3) for _ in range(n)))
---
>         c_ = int(c2 * e)  # hidden channels
>         self.cv1 = Conv(c1, c_, 1, 1)
>         self.cv2 = Conv(c1, c_, 1, 1)
>         self.cv3 = Conv(2 * c_, c2, 1)  # optional act=FReLU(c2)
>         self.m = nn.Sequential(*(Bottleneck(c_, c_, shortcut, g, e=1.0) for _ in range(n)))
276,278c115
<         """Applies cross-convolutions to input in the C3 module."""
<         y = self.cv1(x)
<         return self.m(y) + y
---
>         return self.cv3(torch.cat((self.m(self.cv1(x)), self.cv2(x)), 1))
282,283c119
<     """C3 module with cross-convolutions."""
< 
---
>     # C3 module with cross-convolutions
285d120
<         """Initialize C3TR instance and set default parameters."""
287,288c122,123
<         self.c_ = int(c2 * e)
<         self.m = nn.Sequential(*(Bottleneck(self.c_, self.c_, shortcut, g, k=((1, 3), (3, 1)), e=1) for _ in range(n)))
---
>         c_ = int(c2 * e)
>         self.m = nn.Sequential(*(CrossConv(c_, c_, 3, 1, g, 1.0, shortcut) for _ in range(n)))
292,293c127
<     """C3 module with TransformerBlock()."""
< 
---
>     # C3 module with TransformerBlock()
295d128
<         """Initialize C3Ghost module with GhostBottleneck()."""
301,302c134,140
< class C3Ghost(C3):
<     """C3 module with GhostBottleneck()."""
---
> class C3SPP(C3):
>     # C3 module with SPP()
>     def __init__(self, c1, c2, k=(5, 9, 13), n=1, shortcut=True, g=1, e=0.5):
>         super().__init__(c1, c2, n, shortcut, g, e)
>         c_ = int(c2 * e)
>         self.m = SPP(c_, c_, k)
> 
303a142,143
> class C3Ghost(C3):
>     # C3 module with GhostBottleneck()
305d144
<         """Initialize 'SPP' module with various pooling sizes for spatial pyramid pooling."""
312,313c151
<     """Spatial Pyramid Pooling (SPP) layer https://arxiv.org/abs/1406.4729."""
< 
---
>     # Spatial Pyramid Pooling (SPP) layer https://arxiv.org/abs/1406.4729
315d152
<         """Initialize the SPP layer with input/output channels and pooling kernel sizes."""
323d159
<         """Forward pass of the SPP layer, performing spatial pyramid pooling."""
325c161,163
<         return self.cv2(torch.cat([x] + [m(x) for m in self.m], 1))
---
>         with warnings.catch_warnings():
>             warnings.simplefilter('ignore')  # suppress torch 1.9.0 max_pool2d() warning
>             return self.cv2(torch.cat([x] + [m(x) for m in self.m], 1))
329,330c167
<     """Spatial Pyramid Pooling - Fast (SPPF) layer for YOLOv5 by Glenn Jocher."""
< 
---
>     # Spatial Pyramid Pooling - Fast (SPPF) layer for YOLOv5 by Glenn Jocher
339d175
<         """Forward pass through Ghost Convolution block."""
341,343c177,181
<         y1 = self.m(x)
<         y2 = self.m(y1)
<         return self.cv2(torch.cat((x, y1, y2, self.m(y2)), 1))
---
>         with warnings.catch_warnings():
>             warnings.simplefilter('ignore')  # suppress torch 1.9.0 max_pool2d() warning
>             y1 = self.m(x)
>             y2 = self.m(y1)
>             return self.cv2(torch.cat((x, y1, y2, self.m(y2)), 1))
347,348c185
<     """Focus wh information into c-space."""
< 
---
>     # Focus wh information into c-space
358d194
< 
360,361c196
<     """Ghost Convolution https://github.com/huawei-noah/ghostnet."""
< 
---
>     # Ghost Convolution https://github.com/huawei-noah/ghostnet
369d203
<         """Forward propagation through a Ghost Bottleneck layer with skip connection."""
375,376c209
<     """Ghost Bottleneck https://github.com/huawei-noah/ghostnet."""
< 
---
>     # Ghost Bottleneck https://github.com/huawei-noah/ghostnet
388d220
<         """Applies skip connection and concatenation to input tensor."""
390,391c222
< 
< 
---
>     
393,394c224
<     """Concatenate a list of tensors along dimension."""
< 
---
>     # Concatenate a list of tensors along dimension
396d225
<         """Concatenates a list of tensors along a specified dimension."""
401d229
<         """Forward pass for the YOLOv8 mask Proto module."""
402a231,244
>     
> class Contract(nn.Module):
>     # Contract width-height into channels, i.e. x(1,64,80,80) to x(1,256,40,40)
>     def __init__(self, gain=2):
>         super().__init__()
>         self.gain = gain
> 
>     def forward(self, x):
>         b, c, h, w = x.size()  # assert (h / s == 0) and (W / s == 0), 'Indivisible gain'
>         s = self.gain
>         x = x.view(b, c, h // s, s, w // s, s)  # x(1,64,40,2,40,2)
>         x = x.permute(0, 3, 5, 1, 2, 4).contiguous()  # x(1,2,2,64,40,40)
>         return x.view(b, c * s * s, h // s, w // s)  # x(1,256,40,40)
> 
404c246,250
< # Model heads below ----------------------------------------------------------------------------------------------------
---
> class Expand(nn.Module):
>     # Expand channels into width-height, i.e. x(1,64,80,80) to x(1,16,160,160)
>     def __init__(self, gain=2):
>         super().__init__()
>         self.gain = gain
405a252,268
>     def forward(self, x):
>         b, c, h, w = x.size()  # assert C / s ** 2 == 0, 'Indivisible gain'
>         s = self.gain
>         x = x.view(b, s, s, c // s ** 2, h, w)  # x(1,2,2,16,80,80)
>         x = x.permute(0, 3, 4, 1, 5, 2).contiguous()  # x(1,16,80,2,80,2)
>         return x.view(b, c // s ** 2, h * s, w * s)  # x(1,16,160,160)
>     
> class TransformerLayer(nn.Module):
>     # Transformer layer https://arxiv.org/abs/2010.11929 (LayerNorm layers removed for better performance)
>     def __init__(self, c, num_heads):
>         super().__init__()
>         self.q = nn.Linear(c, c, bias=False)
>         self.k = nn.Linear(c, c, bias=False)
>         self.v = nn.Linear(c, c, bias=False)
>         self.ma = nn.MultiheadAttention(embed_dim=c, num_heads=num_heads)
>         self.fc1 = nn.Linear(c, c, bias=False)
>         self.fc2 = nn.Linear(c, c, bias=False)
407,534c270,292
< class Detect(nn.Module):
<     """YOLOv8 Detect head for detection models."""
<     dynamic = False  # force grid reconstruction
<     export = False  # export mode
<     shape = None
<     anchors = torch.empty(0)  # init
<     strides = torch.empty(0)  # init
< 
<     def __init__(self, nc=80, ch=()):  # detection layer
<         super().__init__()
<         self.nc = nc  # number of classes
<         self.nl = len(ch)  # number of detection layers
<         self.reg_max = 16  # DFL channels (ch[0] // 16 to scale 4/8/12/16/20 for n/s/m/l/x)
<         self.no = nc + self.reg_max * 4  # number of outputs per anchor
<         self.stride = torch.zeros(self.nl)  # strides computed during build
<         c2, c3 = max((16, ch[0] // 4, self.reg_max * 4)), max(ch[0], self.nc)  # channels
<         self.cv2 = nn.ModuleList(
<             nn.Sequential(Conv(x, c2, 3), Conv(c2, c2, 3), nn.Conv2d(c2, 4 * self.reg_max, 1)) for x in ch)
<         self.cv3 = nn.ModuleList(nn.Sequential(Conv(x, c3, 3), Conv(c3, c3, 3), nn.Conv2d(c3, self.nc, 1)) for x in ch)
<         self.dfl = DFL(self.reg_max) if self.reg_max > 1 else nn.Identity()
< 
<     def forward(self, x):
<         """Concatenates and returns predicted bounding boxes and class probabilities."""
<         shape = x[0].shape  # BCHW
<         for i in range(self.nl):
<             x[i] = torch.cat((self.cv2[i](x[i]), self.cv3[i](x[i])), 1)
<         if self.training:
<             return x
<         elif self.dynamic or self.shape != shape:
<             self.anchors, self.strides = (x.transpose(0, 1) for x in make_anchors(x, self.stride, 0.5))
<             self.shape = shape
< 
<         x_cat = torch.cat([xi.view(shape[0], self.no, -1) for xi in x], 2)
<         if self.export and self.format in ('saved_model', 'pb', 'tflite', 'edgetpu', 'tfjs'):  # avoid TF FlexSplitV ops
<             box = x_cat[:, :self.reg_max * 4]
<             cls = x_cat[:, self.reg_max * 4:]
<         else:
<             box, cls = x_cat.split((self.reg_max * 4, self.nc), 1)
<         dbox = dist2bbox(self.dfl(box), self.anchors.unsqueeze(0), xywh=True, dim=1) * self.strides
<         y = torch.cat((dbox, cls.sigmoid()), 1)
<         return y if self.export else (y, x)
< 
<     def bias_init(self):
<         """Initialize Detect() biases, WARNING: requires stride availability."""
<         m = self  # self.model[-1]  # Detect() module
<         # cf = torch.bincount(torch.tensor(np.concatenate(dataset.labels, 0)[:, 0]).long(), minlength=nc) + 1
<         # ncf = math.log(0.6 / (m.nc - 0.999999)) if cf is None else torch.log(cf / cf.sum())  # nominal class frequency
<         for a, b, s in zip(m.cv2, m.cv3, m.stride):  # from
<             a[-1].bias.data[:] = 1.0  # box
<             b[-1].bias.data[:m.nc] = math.log(5 / m.nc / (640 / s) ** 2)  # cls (.01 objects, 80 classes, 640 img)
< 
< 
< class Segment(Detect):
<     """YOLOv8 Segment head for segmentation models."""
< 
<     def __init__(self, nc=80, nm=32, npr=256, ch=()):
<         """Initialize the YOLO model attributes such as the number of masks, prototypes, and the convolution layers."""
<         super().__init__(nc, ch)
<         self.nm = nm  # number of masks
<         self.npr = npr  # number of protos
<         self.proto = Proto(ch[0], self.npr, self.nm)  # protos
<         self.detect = Detect.forward
< 
<         c4 = max(ch[0] // 4, self.nm)
<         self.cv4 = nn.ModuleList(nn.Sequential(Conv(x, c4, 3), Conv(c4, c4, 3), nn.Conv2d(c4, self.nm, 1)) for x in ch)
< 
<     def forward(self, x):
<         """Return model outputs and mask coefficients if training, otherwise return outputs and mask coefficients."""
<         p = self.proto(x[0])  # mask protos
<         bs = p.shape[0]  # batch size
< 
<         mc = torch.cat([self.cv4[i](x[i]).view(bs, self.nm, -1) for i in range(self.nl)], 2)  # mask coefficients
<         x = self.detect(self, x)
<         if self.training:
<             return x, mc, p
<         return (torch.cat([x, mc], 1), p) if self.export else (torch.cat([x[0], mc], 1), (x[1], mc, p))
< 
< 
< class Pose(Detect):
<     """YOLOv8 Pose head for keypoints models."""
< 
<     def __init__(self, nc=80, kpt_shape=(17, 3), ch=()):
<         """Initialize YOLO network with default parameters and Convolutional Layers."""
<         super().__init__(nc, ch)
<         self.kpt_shape = kpt_shape  # number of keypoints, number of dims (2 for x,y or 3 for x,y,visible)
<         self.nk = kpt_shape[0] * kpt_shape[1]  # number of keypoints total
<         self.detect = Detect.forward
< 
<         c4 = max(ch[0] // 4, self.nk)
<         self.cv4 = nn.ModuleList(nn.Sequential(Conv(x, c4, 3), Conv(c4, c4, 3), nn.Conv2d(c4, self.nk, 1)) for x in ch)
< 
<     def forward(self, x):
<         """Perform forward pass through YOLO model and return predictions."""
<         bs = x[0].shape[0]  # batch size
<         kpt = torch.cat([self.cv4[i](x[i]).view(bs, self.nk, -1) for i in range(self.nl)], -1)  # (bs, 17*3, h*w)
<         x = self.detect(self, x)
<         if self.training:
<             return x, kpt
<         pred_kpt = self.kpts_decode(kpt)
<         return torch.cat([x, pred_kpt], 1) if self.export else (torch.cat([x[0], pred_kpt], 1), (x[1], kpt))
< 
<     def kpts_decode(self, kpts):
<         """Decodes keypoints."""
<         ndim = self.kpt_shape[1]
<         y = kpts.clone()
<         if ndim == 3:
<             y[:, 2::3].sigmoid_()  # inplace sigmoid
<         y[:, 0::ndim] = (y[:, 0::ndim] * 2.0 + (self.anchors[0] - 0.5)) * self.strides
<         y[:, 1::ndim] = (y[:, 1::ndim] * 2.0 + (self.anchors[1] - 0.5)) * self.strides
<         return y
< 
< class Classify(nn.Module):
<     """YOLOv8 classification head, i.e. x(b,c1,20,20) to x(b,c2)."""
< 
<     def __init__(self, c1, c2, k=1, s=1, p=None, g=1):  # ch_in, ch_out, kernel, stride, padding, groups
<         super().__init__()
<         c_ = 1280  # efficientnet_b0 size
<         self.conv = Conv(c1, c_, k, s, autopad(k, p), g)
<         self.pool = nn.AdaptiveAvgPool2d(1)  # to x(b,c_,1,1)
<         self.drop = nn.Dropout(p=0.0, inplace=True)
<         self.linear = nn.Linear(c_, c2)  # to x(b,c2)
< 
<     def forward(self, x):
<         """Performs a forward pass of the YOLO model on input image data."""
<         if isinstance(x, list):
<             x = torch.cat(x, 1)
<         x = self.linear(self.drop(self.pool(self.conv(x)).flatten(1)))
<         return x if self.training else x.softmax(1)
---
>     def forward(self, x):
>         x = self.ma(self.q(x), self.k(x), self.v(x))[0] + x
>         x = self.fc2(self.fc1(x)) + x
>         return x
> 
> 
> class TransformerBlock(nn.Module):
>     # Vision Transformer https://arxiv.org/abs/2010.11929
>     def __init__(self, c1, c2, num_heads, num_layers):
>         super().__init__()
>         self.conv = None
>         if c1 != c2:
>             self.conv = Conv(c1, c2)
>         self.linear = nn.Linear(c2, c2)  # learnable position embedding
>         self.tr = nn.Sequential(*(TransformerLayer(c2, num_heads) for _ in range(num_layers)))
>         self.c2 = c2
> 
>     def forward(self, x):
>         if self.conv is not None:
>             x = self.conv(x)
>         b, _, w, h = x.shape
>         p = x.flatten(2).permute(2, 0, 1)
>         return self.tr(p + self.linear(p)).permute(1, 2, 0).reshape(b, self.c2, w, h)
\ No newline at end of file
