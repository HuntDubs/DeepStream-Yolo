yolo.cpp:

1. Yolo::Yolo(const NetworkInfo& networkInfo)
    - Initialize all private variables

2. Yolo::createEngine(nvinfer1::IBuilder* builder, nvinfer1::IBuilderConfig* config)
    - Parse the config file into seperate blocks

3. Yolo::parseConfigFile(const std::string cfgFilePath)
    - Make <key, value> pairs for each Block in the config file
        ex. <"type", "convolutional">
        ex. <"batch_normalize", "1">
        ex. <"filters", "32">
    - Each block is a line in the config file !!

4. Yolo::createEngine(nvinfer1::IBuilder* builder, nvinfer1::IBuilderConfig* config)
    - Call parse config blocks

5. Yolo::parseConfigBlocks()
    - Checks for necessary information stored in the [net] and [yolo] blocks
    - increments m_yoloCount for each yolo layer (this will later decide the length of our array of yoloTensors)
    - In the [yolo] blocks, creates an outputTensor for each [yolo] block and adds it to our list (actual a vector) of yoloTensors
    - More [''] paths to check, but none of those paths included in our yolov5 config

6. Yolo::createEngine(nvinfer1::IBuilder* builder, nvinfer1::IBuilderConfig* config)
    - Call ParseModel(network) with a network defintion that was created from nvinfer classes
    - Checks that ParseModel(..) returns as a success before proceding with the building of the TensorRT createEngine

7. Yolo::parseModel(nvinfer1::INetworkDefinition& network)
    - calls Yolo::destroyNetworkUtils()
        - clears all values that might be stored in m_TrtWeights
    - Reads the weights from the weights file
    - Calls buildYoloNetwork

8. Yolo::buildYoloNetwork(std::vector<float>& weights, nvinfer1::INetworkDefinition& network)
    - sets weightsType to the type of weights file (e.g. wts or weights)
    - Iterates over every block and takes action based on each block
        - Ex. convolutional
            - Saves the input shape (e.g. [3, 640, 640])
            - Creates a convolutionalLayer Tensor
            - Saves the output shape (e.g. [32, 320, 320])
            - Adds the tensor to the tensorOutputs vector
            - Saves the layer name based on it's activation layer (e.g. conv-silu)
            - Prints information to the command line
        - Cont.
            - Saves the previous tensors dimensions (3d)
            - Creates a object of the layer (of type ITensor) from it's corresponding .h, .cpp files (shortcut.h, shortcut.cpp, etc.)
            - Saves the newly created tensors dimenstions (3d)
            - Print layer name, input dims, output dims, and (if applicable) the weightsPtr that keeps track where we are in the weights file
    - checks to see if the weightsPtr made it to the end of the weigts file
    - determines the outputSize based on the modelType
        - Since yolov5 is modelType = 1, then the outputSize is determined by gridSizeX * gridSizeY * numBBoxes
    - Create and add a yolo plugin layer to the network
    - Get the output tensors from the yolo plugin layer. These output tensors represent the number of detections, detection boxes, detection scores, and detection classes
    - Mark each of these tensors as output
    - Print yolo layer information to the command line
    - Return SUCCESS for building the yolo network... CONGRATULATIONS
